/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EggBatch } from "./EggBatch";
import { EggBatchCountArgs } from "./EggBatchCountArgs";
import { EggBatchFindManyArgs } from "./EggBatchFindManyArgs";
import { EggBatchFindUniqueArgs } from "./EggBatchFindUniqueArgs";
import { CreateEggBatchArgs } from "./CreateEggBatchArgs";
import { UpdateEggBatchArgs } from "./UpdateEggBatchArgs";
import { DeleteEggBatchArgs } from "./DeleteEggBatchArgs";
import { EggBatchService } from "../eggBatch.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EggBatch)
export class EggBatchResolverBase {
  constructor(
    protected readonly service: EggBatchService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EggBatch",
    action: "read",
    possession: "any",
  })
  async _eggBatchesMeta(
    @graphql.Args() args: EggBatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EggBatch])
  @nestAccessControl.UseRoles({
    resource: "EggBatch",
    action: "read",
    possession: "any",
  })
  async eggBatches(
    @graphql.Args() args: EggBatchFindManyArgs
  ): Promise<EggBatch[]> {
    return this.service.eggBatches(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EggBatch, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EggBatch",
    action: "read",
    possession: "own",
  })
  async eggBatch(
    @graphql.Args() args: EggBatchFindUniqueArgs
  ): Promise<EggBatch | null> {
    const result = await this.service.eggBatch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EggBatch)
  @nestAccessControl.UseRoles({
    resource: "EggBatch",
    action: "create",
    possession: "any",
  })
  async createEggBatch(
    @graphql.Args() args: CreateEggBatchArgs
  ): Promise<EggBatch> {
    return await this.service.createEggBatch({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EggBatch)
  @nestAccessControl.UseRoles({
    resource: "EggBatch",
    action: "update",
    possession: "any",
  })
  async updateEggBatch(
    @graphql.Args() args: UpdateEggBatchArgs
  ): Promise<EggBatch | null> {
    try {
      return await this.service.updateEggBatch({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EggBatch)
  @nestAccessControl.UseRoles({
    resource: "EggBatch",
    action: "delete",
    possession: "any",
  })
  async deleteEggBatch(
    @graphql.Args() args: DeleteEggBatchArgs
  ): Promise<EggBatch | null> {
    try {
      return await this.service.deleteEggBatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
