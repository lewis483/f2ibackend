/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FarmLocation as PrismaFarmLocation } from "@prisma/client";

export class FarmLocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FarmLocationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.farmLocation.count(args);
  }

  async farmLocations<T extends Prisma.FarmLocationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmLocationFindManyArgs>
  ): Promise<PrismaFarmLocation[]> {
    return this.prisma.farmLocation.findMany<Prisma.FarmLocationFindManyArgs>(
      args
    );
  }
  async farmLocation<T extends Prisma.FarmLocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmLocationFindUniqueArgs>
  ): Promise<PrismaFarmLocation | null> {
    return this.prisma.farmLocation.findUnique(args);
  }
  async createFarmLocation<T extends Prisma.FarmLocationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmLocationCreateArgs>
  ): Promise<PrismaFarmLocation> {
    return this.prisma.farmLocation.create<T>(args);
  }
  async updateFarmLocation<T extends Prisma.FarmLocationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmLocationUpdateArgs>
  ): Promise<PrismaFarmLocation> {
    return this.prisma.farmLocation.update<T>(args);
  }
  async deleteFarmLocation<T extends Prisma.FarmLocationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmLocationDeleteArgs>
  ): Promise<PrismaFarmLocation> {
    return this.prisma.farmLocation.delete(args);
  }
}
