/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MapLayer } from "./MapLayer";
import { MapLayerCountArgs } from "./MapLayerCountArgs";
import { MapLayerFindManyArgs } from "./MapLayerFindManyArgs";
import { MapLayerFindUniqueArgs } from "./MapLayerFindUniqueArgs";
import { CreateMapLayerArgs } from "./CreateMapLayerArgs";
import { UpdateMapLayerArgs } from "./UpdateMapLayerArgs";
import { DeleteMapLayerArgs } from "./DeleteMapLayerArgs";
import { MapLayerService } from "../mapLayer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MapLayer)
export class MapLayerResolverBase {
  constructor(
    protected readonly service: MapLayerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MapLayer",
    action: "read",
    possession: "any",
  })
  async _mapLayersMeta(
    @graphql.Args() args: MapLayerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MapLayer])
  @nestAccessControl.UseRoles({
    resource: "MapLayer",
    action: "read",
    possession: "any",
  })
  async mapLayers(
    @graphql.Args() args: MapLayerFindManyArgs
  ): Promise<MapLayer[]> {
    return this.service.mapLayers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MapLayer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MapLayer",
    action: "read",
    possession: "own",
  })
  async mapLayer(
    @graphql.Args() args: MapLayerFindUniqueArgs
  ): Promise<MapLayer | null> {
    const result = await this.service.mapLayer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MapLayer)
  @nestAccessControl.UseRoles({
    resource: "MapLayer",
    action: "create",
    possession: "any",
  })
  async createMapLayer(
    @graphql.Args() args: CreateMapLayerArgs
  ): Promise<MapLayer> {
    return await this.service.createMapLayer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MapLayer)
  @nestAccessControl.UseRoles({
    resource: "MapLayer",
    action: "update",
    possession: "any",
  })
  async updateMapLayer(
    @graphql.Args() args: UpdateMapLayerArgs
  ): Promise<MapLayer | null> {
    try {
      return await this.service.updateMapLayer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MapLayer)
  @nestAccessControl.UseRoles({
    resource: "MapLayer",
    action: "delete",
    possession: "any",
  })
  async deleteMapLayer(
    @graphql.Args() args: DeleteMapLayerArgs
  ): Promise<MapLayer | null> {
    try {
      return await this.service.deleteMapLayer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
