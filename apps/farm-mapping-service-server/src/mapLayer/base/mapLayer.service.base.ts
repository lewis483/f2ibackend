/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MapLayer as PrismaMapLayer } from "@prisma/client";

export class MapLayerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MapLayerCountArgs, "select">): Promise<number> {
    return this.prisma.mapLayer.count(args);
  }

  async mapLayers<T extends Prisma.MapLayerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MapLayerFindManyArgs>
  ): Promise<PrismaMapLayer[]> {
    return this.prisma.mapLayer.findMany<Prisma.MapLayerFindManyArgs>(args);
  }
  async mapLayer<T extends Prisma.MapLayerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MapLayerFindUniqueArgs>
  ): Promise<PrismaMapLayer | null> {
    return this.prisma.mapLayer.findUnique(args);
  }
  async createMapLayer<T extends Prisma.MapLayerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MapLayerCreateArgs>
  ): Promise<PrismaMapLayer> {
    return this.prisma.mapLayer.create<T>(args);
  }
  async updateMapLayer<T extends Prisma.MapLayerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MapLayerUpdateArgs>
  ): Promise<PrismaMapLayer> {
    return this.prisma.mapLayer.update<T>(args);
  }
  async deleteMapLayer<T extends Prisma.MapLayerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MapLayerDeleteArgs>
  ): Promise<PrismaMapLayer> {
    return this.prisma.mapLayer.delete(args);
  }
}
