/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Fertilizer } from "./Fertilizer";
import { FertilizerCountArgs } from "./FertilizerCountArgs";
import { FertilizerFindManyArgs } from "./FertilizerFindManyArgs";
import { FertilizerFindUniqueArgs } from "./FertilizerFindUniqueArgs";
import { CreateFertilizerArgs } from "./CreateFertilizerArgs";
import { UpdateFertilizerArgs } from "./UpdateFertilizerArgs";
import { DeleteFertilizerArgs } from "./DeleteFertilizerArgs";
import { FertilizerService } from "../fertilizer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Fertilizer)
export class FertilizerResolverBase {
  constructor(
    protected readonly service: FertilizerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Fertilizer",
    action: "read",
    possession: "any",
  })
  async _fertilizersMeta(
    @graphql.Args() args: FertilizerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Fertilizer])
  @nestAccessControl.UseRoles({
    resource: "Fertilizer",
    action: "read",
    possession: "any",
  })
  async fertilizers(
    @graphql.Args() args: FertilizerFindManyArgs
  ): Promise<Fertilizer[]> {
    return this.service.fertilizers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Fertilizer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Fertilizer",
    action: "read",
    possession: "own",
  })
  async fertilizer(
    @graphql.Args() args: FertilizerFindUniqueArgs
  ): Promise<Fertilizer | null> {
    const result = await this.service.fertilizer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Fertilizer)
  @nestAccessControl.UseRoles({
    resource: "Fertilizer",
    action: "create",
    possession: "any",
  })
  async createFertilizer(
    @graphql.Args() args: CreateFertilizerArgs
  ): Promise<Fertilizer> {
    return await this.service.createFertilizer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Fertilizer)
  @nestAccessControl.UseRoles({
    resource: "Fertilizer",
    action: "update",
    possession: "any",
  })
  async updateFertilizer(
    @graphql.Args() args: UpdateFertilizerArgs
  ): Promise<Fertilizer | null> {
    try {
      return await this.service.updateFertilizer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Fertilizer)
  @nestAccessControl.UseRoles({
    resource: "Fertilizer",
    action: "delete",
    possession: "any",
  })
  async deleteFertilizer(
    @graphql.Args() args: DeleteFertilizerArgs
  ): Promise<Fertilizer | null> {
    try {
      return await this.service.deleteFertilizer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
