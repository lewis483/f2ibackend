/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Fertilizer as PrismaFertilizer } from "@prisma/client";

export class FertilizerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FertilizerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fertilizer.count(args);
  }

  async fertilizers<T extends Prisma.FertilizerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FertilizerFindManyArgs>
  ): Promise<PrismaFertilizer[]> {
    return this.prisma.fertilizer.findMany<Prisma.FertilizerFindManyArgs>(args);
  }
  async fertilizer<T extends Prisma.FertilizerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FertilizerFindUniqueArgs>
  ): Promise<PrismaFertilizer | null> {
    return this.prisma.fertilizer.findUnique(args);
  }
  async createFertilizer<T extends Prisma.FertilizerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FertilizerCreateArgs>
  ): Promise<PrismaFertilizer> {
    return this.prisma.fertilizer.create<T>(args);
  }
  async updateFertilizer<T extends Prisma.FertilizerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FertilizerUpdateArgs>
  ): Promise<PrismaFertilizer> {
    return this.prisma.fertilizer.update<T>(args);
  }
  async deleteFertilizer<T extends Prisma.FertilizerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FertilizerDeleteArgs>
  ): Promise<PrismaFertilizer> {
    return this.prisma.fertilizer.delete(args);
  }
}
