/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Insecticide } from "./Insecticide";
import { InsecticideCountArgs } from "./InsecticideCountArgs";
import { InsecticideFindManyArgs } from "./InsecticideFindManyArgs";
import { InsecticideFindUniqueArgs } from "./InsecticideFindUniqueArgs";
import { CreateInsecticideArgs } from "./CreateInsecticideArgs";
import { UpdateInsecticideArgs } from "./UpdateInsecticideArgs";
import { DeleteInsecticideArgs } from "./DeleteInsecticideArgs";
import { InsecticideService } from "../insecticide.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Insecticide)
export class InsecticideResolverBase {
  constructor(
    protected readonly service: InsecticideService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Insecticide",
    action: "read",
    possession: "any",
  })
  async _insecticidesMeta(
    @graphql.Args() args: InsecticideCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Insecticide])
  @nestAccessControl.UseRoles({
    resource: "Insecticide",
    action: "read",
    possession: "any",
  })
  async insecticides(
    @graphql.Args() args: InsecticideFindManyArgs
  ): Promise<Insecticide[]> {
    return this.service.insecticides(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Insecticide, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Insecticide",
    action: "read",
    possession: "own",
  })
  async insecticide(
    @graphql.Args() args: InsecticideFindUniqueArgs
  ): Promise<Insecticide | null> {
    const result = await this.service.insecticide(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Insecticide)
  @nestAccessControl.UseRoles({
    resource: "Insecticide",
    action: "create",
    possession: "any",
  })
  async createInsecticide(
    @graphql.Args() args: CreateInsecticideArgs
  ): Promise<Insecticide> {
    return await this.service.createInsecticide({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Insecticide)
  @nestAccessControl.UseRoles({
    resource: "Insecticide",
    action: "update",
    possession: "any",
  })
  async updateInsecticide(
    @graphql.Args() args: UpdateInsecticideArgs
  ): Promise<Insecticide | null> {
    try {
      return await this.service.updateInsecticide({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Insecticide)
  @nestAccessControl.UseRoles({
    resource: "Insecticide",
    action: "delete",
    possession: "any",
  })
  async deleteInsecticide(
    @graphql.Args() args: DeleteInsecticideArgs
  ): Promise<Insecticide | null> {
    try {
      return await this.service.deleteInsecticide(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
