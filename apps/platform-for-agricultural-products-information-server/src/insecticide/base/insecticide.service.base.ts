/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Insecticide as PrismaInsecticide } from "@prisma/client";

export class InsecticideServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InsecticideCountArgs, "select">
  ): Promise<number> {
    return this.prisma.insecticide.count(args);
  }

  async insecticides<T extends Prisma.InsecticideFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InsecticideFindManyArgs>
  ): Promise<PrismaInsecticide[]> {
    return this.prisma.insecticide.findMany<Prisma.InsecticideFindManyArgs>(
      args
    );
  }
  async insecticide<T extends Prisma.InsecticideFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InsecticideFindUniqueArgs>
  ): Promise<PrismaInsecticide | null> {
    return this.prisma.insecticide.findUnique(args);
  }
  async createInsecticide<T extends Prisma.InsecticideCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InsecticideCreateArgs>
  ): Promise<PrismaInsecticide> {
    return this.prisma.insecticide.create<T>(args);
  }
  async updateInsecticide<T extends Prisma.InsecticideUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InsecticideUpdateArgs>
  ): Promise<PrismaInsecticide> {
    return this.prisma.insecticide.update<T>(args);
  }
  async deleteInsecticide<T extends Prisma.InsecticideDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InsecticideDeleteArgs>
  ): Promise<PrismaInsecticide> {
    return this.prisma.insecticide.delete(args);
  }
}
