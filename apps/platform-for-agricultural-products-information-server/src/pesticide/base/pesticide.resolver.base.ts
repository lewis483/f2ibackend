/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Pesticide } from "./Pesticide";
import { PesticideCountArgs } from "./PesticideCountArgs";
import { PesticideFindManyArgs } from "./PesticideFindManyArgs";
import { PesticideFindUniqueArgs } from "./PesticideFindUniqueArgs";
import { CreatePesticideArgs } from "./CreatePesticideArgs";
import { UpdatePesticideArgs } from "./UpdatePesticideArgs";
import { DeletePesticideArgs } from "./DeletePesticideArgs";
import { PesticideService } from "../pesticide.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Pesticide)
export class PesticideResolverBase {
  constructor(
    protected readonly service: PesticideService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Pesticide",
    action: "read",
    possession: "any",
  })
  async _pesticidesMeta(
    @graphql.Args() args: PesticideCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Pesticide])
  @nestAccessControl.UseRoles({
    resource: "Pesticide",
    action: "read",
    possession: "any",
  })
  async pesticides(
    @graphql.Args() args: PesticideFindManyArgs
  ): Promise<Pesticide[]> {
    return this.service.pesticides(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Pesticide, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Pesticide",
    action: "read",
    possession: "own",
  })
  async pesticide(
    @graphql.Args() args: PesticideFindUniqueArgs
  ): Promise<Pesticide | null> {
    const result = await this.service.pesticide(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pesticide)
  @nestAccessControl.UseRoles({
    resource: "Pesticide",
    action: "create",
    possession: "any",
  })
  async createPesticide(
    @graphql.Args() args: CreatePesticideArgs
  ): Promise<Pesticide> {
    return await this.service.createPesticide({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pesticide)
  @nestAccessControl.UseRoles({
    resource: "Pesticide",
    action: "update",
    possession: "any",
  })
  async updatePesticide(
    @graphql.Args() args: UpdatePesticideArgs
  ): Promise<Pesticide | null> {
    try {
      return await this.service.updatePesticide({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pesticide)
  @nestAccessControl.UseRoles({
    resource: "Pesticide",
    action: "delete",
    possession: "any",
  })
  async deletePesticide(
    @graphql.Args() args: DeletePesticideArgs
  ): Promise<Pesticide | null> {
    try {
      return await this.service.deletePesticide(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
