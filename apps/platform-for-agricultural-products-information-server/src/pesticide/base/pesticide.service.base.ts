/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Pesticide as PrismaPesticide } from "@prisma/client";

export class PesticideServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PesticideCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pesticide.count(args);
  }

  async pesticides<T extends Prisma.PesticideFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PesticideFindManyArgs>
  ): Promise<PrismaPesticide[]> {
    return this.prisma.pesticide.findMany<Prisma.PesticideFindManyArgs>(args);
  }
  async pesticide<T extends Prisma.PesticideFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PesticideFindUniqueArgs>
  ): Promise<PrismaPesticide | null> {
    return this.prisma.pesticide.findUnique(args);
  }
  async createPesticide<T extends Prisma.PesticideCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PesticideCreateArgs>
  ): Promise<PrismaPesticide> {
    return this.prisma.pesticide.create<T>(args);
  }
  async updatePesticide<T extends Prisma.PesticideUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PesticideUpdateArgs>
  ): Promise<PrismaPesticide> {
    return this.prisma.pesticide.update<T>(args);
  }
  async deletePesticide<T extends Prisma.PesticideDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PesticideDeleteArgs>
  ): Promise<PrismaPesticide> {
    return this.prisma.pesticide.delete(args);
  }
}
