/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CropYieldPrediction } from "./CropYieldPrediction";
import { CropYieldPredictionCountArgs } from "./CropYieldPredictionCountArgs";
import { CropYieldPredictionFindManyArgs } from "./CropYieldPredictionFindManyArgs";
import { CropYieldPredictionFindUniqueArgs } from "./CropYieldPredictionFindUniqueArgs";
import { CreateCropYieldPredictionArgs } from "./CreateCropYieldPredictionArgs";
import { UpdateCropYieldPredictionArgs } from "./UpdateCropYieldPredictionArgs";
import { DeleteCropYieldPredictionArgs } from "./DeleteCropYieldPredictionArgs";
import { CropYieldPredictionService } from "../cropYieldPrediction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CropYieldPrediction)
export class CropYieldPredictionResolverBase {
  constructor(
    protected readonly service: CropYieldPredictionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CropYieldPrediction",
    action: "read",
    possession: "any",
  })
  async _cropYieldPredictionsMeta(
    @graphql.Args() args: CropYieldPredictionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CropYieldPrediction])
  @nestAccessControl.UseRoles({
    resource: "CropYieldPrediction",
    action: "read",
    possession: "any",
  })
  async cropYieldPredictions(
    @graphql.Args() args: CropYieldPredictionFindManyArgs
  ): Promise<CropYieldPrediction[]> {
    return this.service.cropYieldPredictions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CropYieldPrediction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CropYieldPrediction",
    action: "read",
    possession: "own",
  })
  async cropYieldPrediction(
    @graphql.Args() args: CropYieldPredictionFindUniqueArgs
  ): Promise<CropYieldPrediction | null> {
    const result = await this.service.cropYieldPrediction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CropYieldPrediction)
  @nestAccessControl.UseRoles({
    resource: "CropYieldPrediction",
    action: "create",
    possession: "any",
  })
  async createCropYieldPrediction(
    @graphql.Args() args: CreateCropYieldPredictionArgs
  ): Promise<CropYieldPrediction> {
    return await this.service.createCropYieldPrediction({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CropYieldPrediction)
  @nestAccessControl.UseRoles({
    resource: "CropYieldPrediction",
    action: "update",
    possession: "any",
  })
  async updateCropYieldPrediction(
    @graphql.Args() args: UpdateCropYieldPredictionArgs
  ): Promise<CropYieldPrediction | null> {
    try {
      return await this.service.updateCropYieldPrediction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CropYieldPrediction)
  @nestAccessControl.UseRoles({
    resource: "CropYieldPrediction",
    action: "delete",
    possession: "any",
  })
  async deleteCropYieldPrediction(
    @graphql.Args() args: DeleteCropYieldPredictionArgs
  ): Promise<CropYieldPrediction | null> {
    try {
      return await this.service.deleteCropYieldPrediction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
