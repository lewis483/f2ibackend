/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Consumer } from "./Consumer";
import { ConsumerCountArgs } from "./ConsumerCountArgs";
import { ConsumerFindManyArgs } from "./ConsumerFindManyArgs";
import { ConsumerFindUniqueArgs } from "./ConsumerFindUniqueArgs";
import { CreateConsumerArgs } from "./CreateConsumerArgs";
import { UpdateConsumerArgs } from "./UpdateConsumerArgs";
import { DeleteConsumerArgs } from "./DeleteConsumerArgs";
import { ConsumerService } from "../consumer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Consumer)
export class ConsumerResolverBase {
  constructor(
    protected readonly service: ConsumerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Consumer",
    action: "read",
    possession: "any",
  })
  async _consumersMeta(
    @graphql.Args() args: ConsumerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Consumer])
  @nestAccessControl.UseRoles({
    resource: "Consumer",
    action: "read",
    possession: "any",
  })
  async consumers(
    @graphql.Args() args: ConsumerFindManyArgs
  ): Promise<Consumer[]> {
    return this.service.consumers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Consumer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Consumer",
    action: "read",
    possession: "own",
  })
  async consumer(
    @graphql.Args() args: ConsumerFindUniqueArgs
  ): Promise<Consumer | null> {
    const result = await this.service.consumer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consumer)
  @nestAccessControl.UseRoles({
    resource: "Consumer",
    action: "create",
    possession: "any",
  })
  async createConsumer(
    @graphql.Args() args: CreateConsumerArgs
  ): Promise<Consumer> {
    return await this.service.createConsumer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consumer)
  @nestAccessControl.UseRoles({
    resource: "Consumer",
    action: "update",
    possession: "any",
  })
  async updateConsumer(
    @graphql.Args() args: UpdateConsumerArgs
  ): Promise<Consumer | null> {
    try {
      return await this.service.updateConsumer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Consumer)
  @nestAccessControl.UseRoles({
    resource: "Consumer",
    action: "delete",
    possession: "any",
  })
  async deleteConsumer(
    @graphql.Args() args: DeleteConsumerArgs
  ): Promise<Consumer | null> {
    try {
      return await this.service.deleteConsumer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
