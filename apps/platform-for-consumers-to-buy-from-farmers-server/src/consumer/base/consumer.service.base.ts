/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Consumer as PrismaConsumer } from "@prisma/client";

export class ConsumerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ConsumerCountArgs, "select">): Promise<number> {
    return this.prisma.consumer.count(args);
  }

  async consumers<T extends Prisma.ConsumerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsumerFindManyArgs>
  ): Promise<PrismaConsumer[]> {
    return this.prisma.consumer.findMany<Prisma.ConsumerFindManyArgs>(args);
  }
  async consumer<T extends Prisma.ConsumerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsumerFindUniqueArgs>
  ): Promise<PrismaConsumer | null> {
    return this.prisma.consumer.findUnique(args);
  }
  async createConsumer<T extends Prisma.ConsumerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsumerCreateArgs>
  ): Promise<PrismaConsumer> {
    return this.prisma.consumer.create<T>(args);
  }
  async updateConsumer<T extends Prisma.ConsumerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsumerUpdateArgs>
  ): Promise<PrismaConsumer> {
    return this.prisma.consumer.update<T>(args);
  }
  async deleteConsumer<T extends Prisma.ConsumerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConsumerDeleteArgs>
  ): Promise<PrismaConsumer> {
    return this.prisma.consumer.delete(args);
  }
}
