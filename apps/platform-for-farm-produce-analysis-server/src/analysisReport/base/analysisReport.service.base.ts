/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AnalysisReport as PrismaAnalysisReport } from "@prisma/client";

export class AnalysisReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalysisReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analysisReport.count(args);
  }

  async analysisReports<T extends Prisma.AnalysisReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisReportFindManyArgs>
  ): Promise<PrismaAnalysisReport[]> {
    return this.prisma.analysisReport.findMany<Prisma.AnalysisReportFindManyArgs>(
      args
    );
  }
  async analysisReport<T extends Prisma.AnalysisReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisReportFindUniqueArgs>
  ): Promise<PrismaAnalysisReport | null> {
    return this.prisma.analysisReport.findUnique(args);
  }
  async createAnalysisReport<T extends Prisma.AnalysisReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisReportCreateArgs>
  ): Promise<PrismaAnalysisReport> {
    return this.prisma.analysisReport.create<T>(args);
  }
  async updateAnalysisReport<T extends Prisma.AnalysisReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisReportUpdateArgs>
  ): Promise<PrismaAnalysisReport> {
    return this.prisma.analysisReport.update<T>(args);
  }
  async deleteAnalysisReport<T extends Prisma.AnalysisReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnalysisReportDeleteArgs>
  ): Promise<PrismaAnalysisReport> {
    return this.prisma.analysisReport.delete(args);
  }
}
