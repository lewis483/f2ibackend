/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FarmProduce } from "./FarmProduce";
import { FarmProduceCountArgs } from "./FarmProduceCountArgs";
import { FarmProduceFindManyArgs } from "./FarmProduceFindManyArgs";
import { FarmProduceFindUniqueArgs } from "./FarmProduceFindUniqueArgs";
import { CreateFarmProduceArgs } from "./CreateFarmProduceArgs";
import { UpdateFarmProduceArgs } from "./UpdateFarmProduceArgs";
import { DeleteFarmProduceArgs } from "./DeleteFarmProduceArgs";
import { FarmProduceService } from "../farmProduce.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FarmProduce)
export class FarmProduceResolverBase {
  constructor(
    protected readonly service: FarmProduceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FarmProduce",
    action: "read",
    possession: "any",
  })
  async _farmProducesMeta(
    @graphql.Args() args: FarmProduceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FarmProduce])
  @nestAccessControl.UseRoles({
    resource: "FarmProduce",
    action: "read",
    possession: "any",
  })
  async farmProduces(
    @graphql.Args() args: FarmProduceFindManyArgs
  ): Promise<FarmProduce[]> {
    return this.service.farmProduces(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FarmProduce, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FarmProduce",
    action: "read",
    possession: "own",
  })
  async farmProduce(
    @graphql.Args() args: FarmProduceFindUniqueArgs
  ): Promise<FarmProduce | null> {
    const result = await this.service.farmProduce(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FarmProduce)
  @nestAccessControl.UseRoles({
    resource: "FarmProduce",
    action: "create",
    possession: "any",
  })
  async createFarmProduce(
    @graphql.Args() args: CreateFarmProduceArgs
  ): Promise<FarmProduce> {
    return await this.service.createFarmProduce({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FarmProduce)
  @nestAccessControl.UseRoles({
    resource: "FarmProduce",
    action: "update",
    possession: "any",
  })
  async updateFarmProduce(
    @graphql.Args() args: UpdateFarmProduceArgs
  ): Promise<FarmProduce | null> {
    try {
      return await this.service.updateFarmProduce({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FarmProduce)
  @nestAccessControl.UseRoles({
    resource: "FarmProduce",
    action: "delete",
    possession: "any",
  })
  async deleteFarmProduce(
    @graphql.Args() args: DeleteFarmProduceArgs
  ): Promise<FarmProduce | null> {
    try {
      return await this.service.deleteFarmProduce(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
