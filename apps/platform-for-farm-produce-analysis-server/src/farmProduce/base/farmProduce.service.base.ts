/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FarmProduce as PrismaFarmProduce } from "@prisma/client";

export class FarmProduceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FarmProduceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.farmProduce.count(args);
  }

  async farmProduces<T extends Prisma.FarmProduceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProduceFindManyArgs>
  ): Promise<PrismaFarmProduce[]> {
    return this.prisma.farmProduce.findMany<Prisma.FarmProduceFindManyArgs>(
      args
    );
  }
  async farmProduce<T extends Prisma.FarmProduceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProduceFindUniqueArgs>
  ): Promise<PrismaFarmProduce | null> {
    return this.prisma.farmProduce.findUnique(args);
  }
  async createFarmProduce<T extends Prisma.FarmProduceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProduceCreateArgs>
  ): Promise<PrismaFarmProduce> {
    return this.prisma.farmProduce.create<T>(args);
  }
  async updateFarmProduce<T extends Prisma.FarmProduceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProduceUpdateArgs>
  ): Promise<PrismaFarmProduce> {
    return this.prisma.farmProduce.update<T>(args);
  }
  async deleteFarmProduce<T extends Prisma.FarmProduceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmProduceDeleteArgs>
  ): Promise<PrismaFarmProduce> {
    return this.prisma.farmProduce.delete(args);
  }
}
