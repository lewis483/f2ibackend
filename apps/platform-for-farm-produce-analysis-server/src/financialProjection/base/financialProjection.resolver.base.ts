/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FinancialProjection } from "./FinancialProjection";
import { FinancialProjectionCountArgs } from "./FinancialProjectionCountArgs";
import { FinancialProjectionFindManyArgs } from "./FinancialProjectionFindManyArgs";
import { FinancialProjectionFindUniqueArgs } from "./FinancialProjectionFindUniqueArgs";
import { CreateFinancialProjectionArgs } from "./CreateFinancialProjectionArgs";
import { UpdateFinancialProjectionArgs } from "./UpdateFinancialProjectionArgs";
import { DeleteFinancialProjectionArgs } from "./DeleteFinancialProjectionArgs";
import { FinancialProjectionService } from "../financialProjection.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FinancialProjection)
export class FinancialProjectionResolverBase {
  constructor(
    protected readonly service: FinancialProjectionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FinancialProjection",
    action: "read",
    possession: "any",
  })
  async _financialProjectionsMeta(
    @graphql.Args() args: FinancialProjectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FinancialProjection])
  @nestAccessControl.UseRoles({
    resource: "FinancialProjection",
    action: "read",
    possession: "any",
  })
  async financialProjections(
    @graphql.Args() args: FinancialProjectionFindManyArgs
  ): Promise<FinancialProjection[]> {
    return this.service.financialProjections(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FinancialProjection, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FinancialProjection",
    action: "read",
    possession: "own",
  })
  async financialProjection(
    @graphql.Args() args: FinancialProjectionFindUniqueArgs
  ): Promise<FinancialProjection | null> {
    const result = await this.service.financialProjection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FinancialProjection)
  @nestAccessControl.UseRoles({
    resource: "FinancialProjection",
    action: "create",
    possession: "any",
  })
  async createFinancialProjection(
    @graphql.Args() args: CreateFinancialProjectionArgs
  ): Promise<FinancialProjection> {
    return await this.service.createFinancialProjection({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FinancialProjection)
  @nestAccessControl.UseRoles({
    resource: "FinancialProjection",
    action: "update",
    possession: "any",
  })
  async updateFinancialProjection(
    @graphql.Args() args: UpdateFinancialProjectionArgs
  ): Promise<FinancialProjection | null> {
    try {
      return await this.service.updateFinancialProjection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinancialProjection)
  @nestAccessControl.UseRoles({
    resource: "FinancialProjection",
    action: "delete",
    possession: "any",
  })
  async deleteFinancialProjection(
    @graphql.Args() args: DeleteFinancialProjectionArgs
  ): Promise<FinancialProjection | null> {
    try {
      return await this.service.deleteFinancialProjection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
