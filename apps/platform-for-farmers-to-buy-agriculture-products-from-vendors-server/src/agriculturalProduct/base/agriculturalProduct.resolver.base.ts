/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AgriculturalProduct } from "./AgriculturalProduct";
import { AgriculturalProductCountArgs } from "./AgriculturalProductCountArgs";
import { AgriculturalProductFindManyArgs } from "./AgriculturalProductFindManyArgs";
import { AgriculturalProductFindUniqueArgs } from "./AgriculturalProductFindUniqueArgs";
import { CreateAgriculturalProductArgs } from "./CreateAgriculturalProductArgs";
import { UpdateAgriculturalProductArgs } from "./UpdateAgriculturalProductArgs";
import { DeleteAgriculturalProductArgs } from "./DeleteAgriculturalProductArgs";
import { AgriculturalProductService } from "../agriculturalProduct.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AgriculturalProduct)
export class AgriculturalProductResolverBase {
  constructor(
    protected readonly service: AgriculturalProductService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AgriculturalProduct",
    action: "read",
    possession: "any",
  })
  async _agriculturalProductsMeta(
    @graphql.Args() args: AgriculturalProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AgriculturalProduct])
  @nestAccessControl.UseRoles({
    resource: "AgriculturalProduct",
    action: "read",
    possession: "any",
  })
  async agriculturalProducts(
    @graphql.Args() args: AgriculturalProductFindManyArgs
  ): Promise<AgriculturalProduct[]> {
    return this.service.agriculturalProducts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AgriculturalProduct, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AgriculturalProduct",
    action: "read",
    possession: "own",
  })
  async agriculturalProduct(
    @graphql.Args() args: AgriculturalProductFindUniqueArgs
  ): Promise<AgriculturalProduct | null> {
    const result = await this.service.agriculturalProduct(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AgriculturalProduct)
  @nestAccessControl.UseRoles({
    resource: "AgriculturalProduct",
    action: "create",
    possession: "any",
  })
  async createAgriculturalProduct(
    @graphql.Args() args: CreateAgriculturalProductArgs
  ): Promise<AgriculturalProduct> {
    return await this.service.createAgriculturalProduct({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AgriculturalProduct)
  @nestAccessControl.UseRoles({
    resource: "AgriculturalProduct",
    action: "update",
    possession: "any",
  })
  async updateAgriculturalProduct(
    @graphql.Args() args: UpdateAgriculturalProductArgs
  ): Promise<AgriculturalProduct | null> {
    try {
      return await this.service.updateAgriculturalProduct({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AgriculturalProduct)
  @nestAccessControl.UseRoles({
    resource: "AgriculturalProduct",
    action: "delete",
    possession: "any",
  })
  async deleteAgriculturalProduct(
    @graphql.Args() args: DeleteAgriculturalProductArgs
  ): Promise<AgriculturalProduct | null> {
    try {
      return await this.service.deleteAgriculturalProduct(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
