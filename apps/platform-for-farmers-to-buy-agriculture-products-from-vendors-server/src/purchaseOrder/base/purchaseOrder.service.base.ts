/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PurchaseOrder as PrismaPurchaseOrder,
  Payment as PrismaPayment,
} from "@prisma/client";

export class PurchaseOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchaseOrderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchaseOrder.count(args);
  }

  async purchaseOrders<T extends Prisma.PurchaseOrderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseOrderFindManyArgs>
  ): Promise<PrismaPurchaseOrder[]> {
    return this.prisma.purchaseOrder.findMany<Prisma.PurchaseOrderFindManyArgs>(
      args
    );
  }
  async purchaseOrder<T extends Prisma.PurchaseOrderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseOrderFindUniqueArgs>
  ): Promise<PrismaPurchaseOrder | null> {
    return this.prisma.purchaseOrder.findUnique(args);
  }
  async createPurchaseOrder<T extends Prisma.PurchaseOrderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseOrderCreateArgs>
  ): Promise<PrismaPurchaseOrder> {
    return this.prisma.purchaseOrder.create<T>(args);
  }
  async updatePurchaseOrder<T extends Prisma.PurchaseOrderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseOrderUpdateArgs>
  ): Promise<PrismaPurchaseOrder> {
    return this.prisma.purchaseOrder.update<T>(args);
  }
  async deletePurchaseOrder<T extends Prisma.PurchaseOrderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PurchaseOrderDeleteArgs>
  ): Promise<PrismaPurchaseOrder> {
    return this.prisma.purchaseOrder.delete(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.purchaseOrder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }
}
