/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Pricing } from "./Pricing";
import { PricingCountArgs } from "./PricingCountArgs";
import { PricingFindManyArgs } from "./PricingFindManyArgs";
import { PricingFindUniqueArgs } from "./PricingFindUniqueArgs";
import { CreatePricingArgs } from "./CreatePricingArgs";
import { UpdatePricingArgs } from "./UpdatePricingArgs";
import { DeletePricingArgs } from "./DeletePricingArgs";
import { Produce } from "../../produce/base/Produce";
import { PricingService } from "../pricing.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Pricing)
export class PricingResolverBase {
  constructor(
    protected readonly service: PricingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Pricing",
    action: "read",
    possession: "any",
  })
  async _pricingsMeta(
    @graphql.Args() args: PricingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Pricing])
  @nestAccessControl.UseRoles({
    resource: "Pricing",
    action: "read",
    possession: "any",
  })
  async pricings(
    @graphql.Args() args: PricingFindManyArgs
  ): Promise<Pricing[]> {
    return this.service.pricings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Pricing, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Pricing",
    action: "read",
    possession: "own",
  })
  async pricing(
    @graphql.Args() args: PricingFindUniqueArgs
  ): Promise<Pricing | null> {
    const result = await this.service.pricing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pricing)
  @nestAccessControl.UseRoles({
    resource: "Pricing",
    action: "create",
    possession: "any",
  })
  async createPricing(
    @graphql.Args() args: CreatePricingArgs
  ): Promise<Pricing> {
    return await this.service.createPricing({
      ...args,
      data: {
        ...args.data,

        produce: args.data.produce
          ? {
              connect: args.data.produce,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pricing)
  @nestAccessControl.UseRoles({
    resource: "Pricing",
    action: "update",
    possession: "any",
  })
  async updatePricing(
    @graphql.Args() args: UpdatePricingArgs
  ): Promise<Pricing | null> {
    try {
      return await this.service.updatePricing({
        ...args,
        data: {
          ...args.data,

          produce: args.data.produce
            ? {
                connect: args.data.produce,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pricing)
  @nestAccessControl.UseRoles({
    resource: "Pricing",
    action: "delete",
    possession: "any",
  })
  async deletePricing(
    @graphql.Args() args: DeletePricingArgs
  ): Promise<Pricing | null> {
    try {
      return await this.service.deletePricing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Produce, {
    nullable: true,
    name: "produce",
  })
  @nestAccessControl.UseRoles({
    resource: "Produce",
    action: "read",
    possession: "any",
  })
  async getProduce(@graphql.Parent() parent: Pricing): Promise<Produce | null> {
    const result = await this.service.getProduce(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
