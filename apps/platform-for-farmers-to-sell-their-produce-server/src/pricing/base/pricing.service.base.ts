/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Pricing as PrismaPricing,
  Produce as PrismaProduce,
} from "@prisma/client";

export class PricingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PricingCountArgs, "select">): Promise<number> {
    return this.prisma.pricing.count(args);
  }

  async pricings<T extends Prisma.PricingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingFindManyArgs>
  ): Promise<PrismaPricing[]> {
    return this.prisma.pricing.findMany<Prisma.PricingFindManyArgs>(args);
  }
  async pricing<T extends Prisma.PricingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingFindUniqueArgs>
  ): Promise<PrismaPricing | null> {
    return this.prisma.pricing.findUnique(args);
  }
  async createPricing<T extends Prisma.PricingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingCreateArgs>
  ): Promise<PrismaPricing> {
    return this.prisma.pricing.create<T>(args);
  }
  async updatePricing<T extends Prisma.PricingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingUpdateArgs>
  ): Promise<PrismaPricing> {
    return this.prisma.pricing.update<T>(args);
  }
  async deletePricing<T extends Prisma.PricingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingDeleteArgs>
  ): Promise<PrismaPricing> {
    return this.prisma.pricing.delete(args);
  }

  async getProduce(parentId: string): Promise<PrismaProduce | null> {
    return this.prisma.pricing
      .findUnique({
        where: { id: parentId },
      })
      .produce();
  }
}
