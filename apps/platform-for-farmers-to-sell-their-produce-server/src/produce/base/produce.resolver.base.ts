/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Produce } from "./Produce";
import { ProduceCountArgs } from "./ProduceCountArgs";
import { ProduceFindManyArgs } from "./ProduceFindManyArgs";
import { ProduceFindUniqueArgs } from "./ProduceFindUniqueArgs";
import { CreateProduceArgs } from "./CreateProduceArgs";
import { UpdateProduceArgs } from "./UpdateProduceArgs";
import { DeleteProduceArgs } from "./DeleteProduceArgs";
import { PricingFindManyArgs } from "../../pricing/base/PricingFindManyArgs";
import { Pricing } from "../../pricing/base/Pricing";
import { ProduceService } from "../produce.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Produce)
export class ProduceResolverBase {
  constructor(
    protected readonly service: ProduceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Produce",
    action: "read",
    possession: "any",
  })
  async _producesMeta(
    @graphql.Args() args: ProduceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Produce])
  @nestAccessControl.UseRoles({
    resource: "Produce",
    action: "read",
    possession: "any",
  })
  async produces(
    @graphql.Args() args: ProduceFindManyArgs
  ): Promise<Produce[]> {
    return this.service.produces(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Produce, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Produce",
    action: "read",
    possession: "own",
  })
  async produce(
    @graphql.Args() args: ProduceFindUniqueArgs
  ): Promise<Produce | null> {
    const result = await this.service.produce(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Produce)
  @nestAccessControl.UseRoles({
    resource: "Produce",
    action: "create",
    possession: "any",
  })
  async createProduce(
    @graphql.Args() args: CreateProduceArgs
  ): Promise<Produce> {
    return await this.service.createProduce({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Produce)
  @nestAccessControl.UseRoles({
    resource: "Produce",
    action: "update",
    possession: "any",
  })
  async updateProduce(
    @graphql.Args() args: UpdateProduceArgs
  ): Promise<Produce | null> {
    try {
      return await this.service.updateProduce({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Produce)
  @nestAccessControl.UseRoles({
    resource: "Produce",
    action: "delete",
    possession: "any",
  })
  async deleteProduce(
    @graphql.Args() args: DeleteProduceArgs
  ): Promise<Produce | null> {
    try {
      return await this.service.deleteProduce(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Pricing], { name: "pricings" })
  @nestAccessControl.UseRoles({
    resource: "Pricing",
    action: "read",
    possession: "any",
  })
  async findPricings(
    @graphql.Parent() parent: Produce,
    @graphql.Args() args: PricingFindManyArgs
  ): Promise<Pricing[]> {
    const results = await this.service.findPricings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
