/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProduceInfo } from "./ProduceInfo";
import { ProduceInfoCountArgs } from "./ProduceInfoCountArgs";
import { ProduceInfoFindManyArgs } from "./ProduceInfoFindManyArgs";
import { ProduceInfoFindUniqueArgs } from "./ProduceInfoFindUniqueArgs";
import { CreateProduceInfoArgs } from "./CreateProduceInfoArgs";
import { UpdateProduceInfoArgs } from "./UpdateProduceInfoArgs";
import { DeleteProduceInfoArgs } from "./DeleteProduceInfoArgs";
import { ProduceInfoService } from "../produceInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProduceInfo)
export class ProduceInfoResolverBase {
  constructor(
    protected readonly service: ProduceInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProduceInfo",
    action: "read",
    possession: "any",
  })
  async _produceInfosMeta(
    @graphql.Args() args: ProduceInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProduceInfo])
  @nestAccessControl.UseRoles({
    resource: "ProduceInfo",
    action: "read",
    possession: "any",
  })
  async produceInfos(
    @graphql.Args() args: ProduceInfoFindManyArgs
  ): Promise<ProduceInfo[]> {
    return this.service.produceInfos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProduceInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProduceInfo",
    action: "read",
    possession: "own",
  })
  async produceInfo(
    @graphql.Args() args: ProduceInfoFindUniqueArgs
  ): Promise<ProduceInfo | null> {
    const result = await this.service.produceInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProduceInfo)
  @nestAccessControl.UseRoles({
    resource: "ProduceInfo",
    action: "create",
    possession: "any",
  })
  async createProduceInfo(
    @graphql.Args() args: CreateProduceInfoArgs
  ): Promise<ProduceInfo> {
    return await this.service.createProduceInfo({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProduceInfo)
  @nestAccessControl.UseRoles({
    resource: "ProduceInfo",
    action: "update",
    possession: "any",
  })
  async updateProduceInfo(
    @graphql.Args() args: UpdateProduceInfoArgs
  ): Promise<ProduceInfo | null> {
    try {
      return await this.service.updateProduceInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProduceInfo)
  @nestAccessControl.UseRoles({
    resource: "ProduceInfo",
    action: "delete",
    possession: "any",
  })
  async deleteProduceInfo(
    @graphql.Args() args: DeleteProduceInfoArgs
  ): Promise<ProduceInfo | null> {
    try {
      return await this.service.deleteProduceInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
