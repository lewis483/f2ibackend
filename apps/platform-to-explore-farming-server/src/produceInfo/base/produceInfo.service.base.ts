/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProduceInfo as PrismaProduceInfo } from "@prisma/client";

export class ProduceInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProduceInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.produceInfo.count(args);
  }

  async produceInfos<T extends Prisma.ProduceInfoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduceInfoFindManyArgs>
  ): Promise<PrismaProduceInfo[]> {
    return this.prisma.produceInfo.findMany<Prisma.ProduceInfoFindManyArgs>(
      args
    );
  }
  async produceInfo<T extends Prisma.ProduceInfoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduceInfoFindUniqueArgs>
  ): Promise<PrismaProduceInfo | null> {
    return this.prisma.produceInfo.findUnique(args);
  }
  async createProduceInfo<T extends Prisma.ProduceInfoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduceInfoCreateArgs>
  ): Promise<PrismaProduceInfo> {
    return this.prisma.produceInfo.create<T>(args);
  }
  async updateProduceInfo<T extends Prisma.ProduceInfoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduceInfoUpdateArgs>
  ): Promise<PrismaProduceInfo> {
    return this.prisma.produceInfo.update<T>(args);
  }
  async deleteProduceInfo<T extends Prisma.ProduceInfoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduceInfoDeleteArgs>
  ): Promise<PrismaProduceInfo> {
    return this.prisma.produceInfo.delete(args);
  }
}
