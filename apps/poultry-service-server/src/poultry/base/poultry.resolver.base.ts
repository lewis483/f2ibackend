/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Poultry } from "./Poultry";
import { PoultryCountArgs } from "./PoultryCountArgs";
import { PoultryFindManyArgs } from "./PoultryFindManyArgs";
import { PoultryFindUniqueArgs } from "./PoultryFindUniqueArgs";
import { CreatePoultryArgs } from "./CreatePoultryArgs";
import { UpdatePoultryArgs } from "./UpdatePoultryArgs";
import { DeletePoultryArgs } from "./DeletePoultryArgs";
import { PoultryService } from "../poultry.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Poultry)
export class PoultryResolverBase {
  constructor(
    protected readonly service: PoultryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Poultry",
    action: "read",
    possession: "any",
  })
  async _poultriesMeta(
    @graphql.Args() args: PoultryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Poultry])
  @nestAccessControl.UseRoles({
    resource: "Poultry",
    action: "read",
    possession: "any",
  })
  async poultries(
    @graphql.Args() args: PoultryFindManyArgs
  ): Promise<Poultry[]> {
    return this.service.poultries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Poultry, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Poultry",
    action: "read",
    possession: "own",
  })
  async poultry(
    @graphql.Args() args: PoultryFindUniqueArgs
  ): Promise<Poultry | null> {
    const result = await this.service.poultry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Poultry)
  @nestAccessControl.UseRoles({
    resource: "Poultry",
    action: "create",
    possession: "any",
  })
  async createPoultry(
    @graphql.Args() args: CreatePoultryArgs
  ): Promise<Poultry> {
    return await this.service.createPoultry({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Poultry)
  @nestAccessControl.UseRoles({
    resource: "Poultry",
    action: "update",
    possession: "any",
  })
  async updatePoultry(
    @graphql.Args() args: UpdatePoultryArgs
  ): Promise<Poultry | null> {
    try {
      return await this.service.updatePoultry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Poultry)
  @nestAccessControl.UseRoles({
    resource: "Poultry",
    action: "delete",
    possession: "any",
  })
  async deletePoultry(
    @graphql.Args() args: DeletePoultryArgs
  ): Promise<Poultry | null> {
    try {
      return await this.service.deletePoultry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
