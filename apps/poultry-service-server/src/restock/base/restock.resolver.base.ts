/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Restock } from "./Restock";
import { RestockCountArgs } from "./RestockCountArgs";
import { RestockFindManyArgs } from "./RestockFindManyArgs";
import { RestockFindUniqueArgs } from "./RestockFindUniqueArgs";
import { CreateRestockArgs } from "./CreateRestockArgs";
import { UpdateRestockArgs } from "./UpdateRestockArgs";
import { DeleteRestockArgs } from "./DeleteRestockArgs";
import { RestockService } from "../restock.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Restock)
export class RestockResolverBase {
  constructor(
    protected readonly service: RestockService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Restock",
    action: "read",
    possession: "any",
  })
  async _restocksMeta(
    @graphql.Args() args: RestockCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Restock])
  @nestAccessControl.UseRoles({
    resource: "Restock",
    action: "read",
    possession: "any",
  })
  async restocks(
    @graphql.Args() args: RestockFindManyArgs
  ): Promise<Restock[]> {
    return this.service.restocks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Restock, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Restock",
    action: "read",
    possession: "own",
  })
  async restock(
    @graphql.Args() args: RestockFindUniqueArgs
  ): Promise<Restock | null> {
    const result = await this.service.restock(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Restock)
  @nestAccessControl.UseRoles({
    resource: "Restock",
    action: "create",
    possession: "any",
  })
  async createRestock(
    @graphql.Args() args: CreateRestockArgs
  ): Promise<Restock> {
    return await this.service.createRestock({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Restock)
  @nestAccessControl.UseRoles({
    resource: "Restock",
    action: "update",
    possession: "any",
  })
  async updateRestock(
    @graphql.Args() args: UpdateRestockArgs
  ): Promise<Restock | null> {
    try {
      return await this.service.updateRestock({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Restock)
  @nestAccessControl.UseRoles({
    resource: "Restock",
    action: "delete",
    possession: "any",
  })
  async deleteRestock(
    @graphql.Args() args: DeleteRestockArgs
  ): Promise<Restock | null> {
    try {
      return await this.service.deleteRestock(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
