/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Restock as PrismaRestock } from "@prisma/client";

export class RestockServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RestockCountArgs, "select">): Promise<number> {
    return this.prisma.restock.count(args);
  }

  async restocks<T extends Prisma.RestockFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestockFindManyArgs>
  ): Promise<PrismaRestock[]> {
    return this.prisma.restock.findMany<Prisma.RestockFindManyArgs>(args);
  }
  async restock<T extends Prisma.RestockFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestockFindUniqueArgs>
  ): Promise<PrismaRestock | null> {
    return this.prisma.restock.findUnique(args);
  }
  async createRestock<T extends Prisma.RestockCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestockCreateArgs>
  ): Promise<PrismaRestock> {
    return this.prisma.restock.create<T>(args);
  }
  async updateRestock<T extends Prisma.RestockUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestockUpdateArgs>
  ): Promise<PrismaRestock> {
    return this.prisma.restock.update<T>(args);
  }
  async deleteRestock<T extends Prisma.RestockDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestockDeleteArgs>
  ): Promise<PrismaRestock> {
    return this.prisma.restock.delete(args);
  }
}
